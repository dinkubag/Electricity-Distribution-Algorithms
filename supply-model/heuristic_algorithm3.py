#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 14 11:36:10 2025

@author: dineshkumarbaghel
"""

import numpy as np
from typing import List, Tuple
import ffk 
import logging
import math
import time
import random
import copy
# required python3.7 or higher
from dataclasses import dataclass, field
from solution import Solution
import experiments_csv
from matplotlib import pyplot as plt


@dataclass(order=True)
class group:
    asr:float = field(default = 0.0, compare=True)
    group_id: int = field(default = -1)
    agents: List[Tuple] = field(default_factory = [])
    actual_sum: float = field(default = 0)
    k:int = field(default = 0.0)
    allowed_group_sum:float = field(default=0)
    agents_pseudo_sum:float = field(default = 0, init = False)

    def __post_init__(self):
        if self.actual_sum < self.allowed_group_sum:
            self.agents_pseudo_sum = self.allowed_group_sum
        else:
            self.agents_pseudo_sum = self.actual_sum

def compute_groups_ofitems(demands:List[Tuple], r:int, max_demand:Tuple) -> List[group]:
    '''
    Function computes the groups of items such that the sum of all the items in each group is necessary
    to equal or exceed r*max_demand.
    
    Demands must be arranged in non-increasing order.

    Parameters
    ----------
    demands : List[Tuple]
        DESCRIPTION.
    r : int
        DESCRIPTION.
    max_demand : Tuple
        DESCRIPTION.

    Returns
    -------
    List[Tuple]
        DESCRIPTION.

    >>> groups = compute_groups_ofitems([(0.0135,0), (0.4865,1), (1.5,2), (1, 3)], 1, (1.5,2))
    >>> for grp in groups:
    ...     print(f"{grp.agents}")
    [(1.5, 2)]
    [(1, 3), (0.4865, 1), (0.0135, 0)]
    
    >>> groups = compute_groups_ofitems([(0.4865,1), (1.5,2), (1, 3)], 1, (1.5,2))
    >>> for grp in groups:
    ...     print(f"{grp.agents}")
    [(1.5, 2)]
    [(1, 3), (0.4865, 1)]
    
    >>> groups = compute_groups_ofitems([(0.0135, 0), (0.4865,1), (1.5,2), (1, 3)], 2/3, (1.5,2))
    >>> for grp in groups:
    ...     print(f"{grp.agents}")
    [(1.5, 2)]
    [(1, 3)]
    [(0.4865, 1), (0.0135, 0)]
    
    >>> groups = compute_groups_ofitems([(0.0135,0), (0.4865,1), (1.5,2), (1, 3)], 0, (1.5,2))
    >>> for group in groups:
    ...     print(f"{group.agents}")
    []
    [(1.5, 2)]
    [(1, 3)]
    [(0.4865, 1)]
    [(0.0135, 0)]
    
    '''
    group_ofitems = []
    group_ofitems_sum = 0
    
    groups_ofitems = []
    
    sorted_demands = sorted(demands, key = lambda demand: demand[0], reverse = True)
    
    max_group_sum = r * max_demand[0]
    
    count  = 0
    for item in sorted_demands:
        # group has sum >= max_group_sum
        # bool_group_ofitems_sum = False
        
        if group_ofitems_sum < max_group_sum:
            group_ofitems.append(item)
            group_ofitems_sum += item[0]
        else:
            groups_ofitems.append(group(group_id = count, agents = group_ofitems, actual_sum=group_ofitems_sum, allowed_group_sum=max_group_sum))
            count += 1
            group_ofitems = []
            group_ofitems_sum = 0
            
            # the current item has to be inserted into 
            # group_ofitems and the sum group_ofitems_sum has to be updated
            group_ofitems.append(item)
            group_ofitems_sum += item[0]
            
            # prvious group has sum >= max_group_sum
            # bool_group_ofitems_sum = True

    # it may happen that the if condition is satisfied in the last iteration.
    # if bool_group_ofitems_sum == False:
    groups_ofitems.append(group(group_id = count, agents = group_ofitems, actual_sum=group_ofitems_sum, allowed_group_sum=max_group_sum))
    
    return groups_ofitems


# function required for v3 of the above algorithm
def compute_solution(alg, new_new_demands, groups, stl_demand_list, supply, g, k) -> Solution:
    '''
    

    Parameters
    ----------
    alg : TYPE
        DESCRIPTION.
    new_demands : TYPE
        DESCRIPTION.
    sorted_smallest_tolargest_demand : TYPE
        DESCRIPTION.
    supply : TYPE
        DESCRIPTION.
    grp : TYPE
        DESCRIPTION.
    k : TYPE
        DESCRIPTION.

    Returns
    -------
    Solution
        DESCRIPTION.

    '''
    if __name__ == "__main__":
        logger = logging.getLogger("compute_solution")
    else:
        logger = logging.getLogger("heiristic_algorithm3: compute _solution")
    
    final_new_new_demands = copy.deepcopy(new_new_demands)
    
    # compute the group which is connected all the time.
    always_connect_list = stl_demand_list[:g]
    
    # now remove the demands in always_connect_list from final_new_new_demands
    for demand in always_connect_list:
        final_new_new_demands.remove(demand)
    
    # update supply as well
    final_supply = supply - sum([demand[0] for demand in always_connect_list])
    
    # for logging - start
    # logging.info(f"Always connecting below {g} demands with sum {sum([demand[0] for demand in always_connect_list])}:")
    # demand_str = [f"group demand: {demand[0]}, index: {demand[1]}" for demand in always_connect_list]
    # logging.debug("\n".join(demand_str))
    # logging.info("Remaining group demands to connect:")
    # demand_str = [f"group demand: {demand[0]}, index: {demand[1]}" for demand in final_new_new_demands]
    # logging.debug("\n".join(demand_str))
    # logging.debug(f"Updated supply: {final_supply}")
    # logging.info("\n")
    # for logging - end
    
    # max in new-new_demands
    maxin_newnewdemands = max(new_new_demands)
    
    # compute the solution with final_new_new_demands and final_supply
    # determine the agents_kvector for final_new_new_demands
    agents_kvector_finalnewnewdemands = []
    for demand in final_new_new_demands:
        agents_kvector_finalnewnewdemands.append((round((k*maxin_newnewdemands[0])/demand[0], 0), demand[1]))    
    
    # for logging - start
    # logging.info("k vector for remaining groups to connect:")
    # kvector_str = [f"k: {item[0]}, index: {item[1]}" for item in agents_kvector_finalnewnewdemands]
    # logger.debug("\n".join(kvector_str))
    # logger.info("\n")    
    # for logging - end

    # use FFk to compute the packing.
    binner = ffk.bkc_ffk()
    if alg == "online":
        solution = ffk.online_ffk_supply_withvectork_test(binner, final_supply, final_new_new_demands , agents_kvector_finalnewnewdemands)
    else:
        solution = ffk.decreasing_ffk_supply_withvectork_test(binner, final_supply, final_new_new_demands, agents_kvector_finalnewnewdemands)            
        
    # Now create solution from solution
    sums, lists = solution
    
    numof_bins = binner.numbins(solution)
    
    # now we add the items in always_connect_list to each bin in solution.
    for ibin in range(numof_bins):
        for demand in always_connect_list:
            binner.add_item_to_bin(solution, demand, ibin)

    # for logging - start
    # logging.info("Final solution after adding the items in the always connect list:")
    # numbins_in_solution = binner.numbins(solution)
    # solution_str = [f"Bin: #{i}, {lists[i]}, Sum: {sums[i]}" for i in range(numbins_in_solution)]
    # logger.debug("\n".join(solution_str))
    # logger.info("\n")
    # for logging - end
    
    # now we remove an item from the bin and replace it with the actual set of items
    # if possible we will replace it with the actual sum. I think we do not need it.
    # we do not need the below line as we already computed the numof_bins above
    # numbins = binner.numbins(solution)
    
    new_agents_k_vector = []
    groups[:] = sorted(groups, key = lambda grp: grp.group_id)
    
    # for logging - start
    # groups_str = [f"group index: {grp.group_id}, group agents: {grp.agents}" for grp in groups]
    # logger.debug("\n".join(groups_str))
    # logger.info("\n")  
    # for logging - end

    # add the tuple (numof_bins, demand_id) to agents_kvector_finalnewnewdemands;
    # do this for all the demands in always_connect_list
    for demand in always_connect_list:
        agents_kvector_finalnewnewdemands.append((numof_bins, demand[1]))
        
    # for logging -start
    # logging.info("k vector after adding k tuple for demands in always connect list:")
    # kvector_str = [f"k: {item[0]}, index: {item[1]}" for item in agents_kvector_finalnewnewdemands]
    # logger.debug("\n".join(kvector_str))
    # logger.info("\n")    
    # for logging - end

    # sorting the agents_kvector_finalnewnewdemands
    agents_kvector_finalnewnewdemands[:] = sorted(agents_kvector_finalnewnewdemands, key = lambda demand: demand[1])
    
    # now we replace an item in the bin with actual set of items in the bin.
    for bin_index in range(numof_bins):
        demands_to_replace = []
        demands_to_add = []
        for demand in new_new_demands:
            if demand in lists[bin_index]:
                demands_to_replace.append(demand)
                # for item in groups[demand[1]].agents:       #OLD LINE
                # below are the new lines.
                grp = next((group for group in groups if group.group_id == demand[1]), None)
                for item in grp.agents:
                    demands_to_add.append(item)
                
                # for debugging
                # logger.debug(f"demand: {demand} is in bin: #{bin_index} {lists[bin_index]}")
                
                # binner.replace_item_in_bin(solution, demand, groups[demand[1]].agents , bin_index)                
                
                # add the tuple (k, agent_index) for the agents in the new_demand
                k_val = None
                for ktuple in agents_kvector_finalnewnewdemands:
                    if ktuple[1] == demand[1]:
                        k_val = ktuple[0]
                
                for demand in demands_to_add:
                    agent_ktuple = (k_val, demand[1])
                    if agent_ktuple not in new_agents_k_vector:
                        new_agents_k_vector.append(agent_ktuple)
        
        # removing the demands in demands_to_replace
        for demand in demands_to_replace:
            binner.remove_item_from_bin(solution, demand, bin_index)
        # adding the demands in demands_to_add
        for demand in demands_to_add:
            binner.add_item_to_bin(solution, demand, bin_index)
        
        # for logging
        # logger.debug(f"after replacing: {lists[bin_index]}")
        
        # binner.replace_item_in_bin(solution, demand, groups[demand[1]].agents , bin_index)                

    sums, lists = solution
    
    # for logging - start
    # logging.info("Final solution after replacing demands with their original list:")
    # numbins_in_solution = binner.numbins(solution)
    # solution_str = [f"Bin: #{i}, {lists[i]}, Sum: {sums[i]}" for i in range(numbins_in_solution)]
    # logger.debug("\n".join(solution_str))
    # logger.info("\n")
    
    # logging.info("Agents k vector for the orginal list:")
    # kvector_str = [f"k: {item[0]}, index: {item[1]}" for item in new_agents_k_vector]
    # logger.debug("\n".join(kvector_str))
    # logger.info("\n")    
    # for logging - end
    
    # for logging - start
    # numbins_final_soln = binner.numbins(solution)
    
    # final_kvector_str = [f"k: {item[0]}, index: {item[1]}" for item in new_agents_k_vector]
    # logger.debug("\n".join(final_kvector_str))
    # logger.info("\n")   
    
    # final_soln_str = [f"Bin: #{i} {lists[i]}, Sum: {sums[i]}" for i in range(numbins_final_soln)]
    # logger.debug("\n".join(final_soln_str))
    # logger.info("\n")
    #  for logging - end
    
    # determine the agents which are connected all the time
    g_items_list = []
    
    for group in groups:
        for grp in always_connect_list:
            if grp[1] == group.group_id:
                for demand in group.agents:
                    g_items_list.append(demand)
    
    return (sums, lists, new_agents_k_vector, g_items_list)

def compute_egal_alg3_v3(alg:str, demands: List[float], supply: int, k:int, r:float=1) -> Tuple:
    '''
    This algorithm uses the alternative grouping as in Karmarkar Karp paper.
    This algorithm also uses the alternaive machanism which was based on LCM.
    START:
        1. Sort the agents in the non-increasing order.
        2. Form the group of sufficiently large agents s.t. the sum of demands of all the agents in the
        group equals or exceeds r*largest_demand.
        3. Apply the heuristic algorithm with k = 50 to compute the equal supply.
        4. In the solution replace the groups with the agents that constitutes the group.
        5. Compute the connection for all the agents
        6. Compute the egalitarian value for all the agents.
        7. Compute the ASR.
    END:
        
    Returns
    -------
    Tuple(Solution, List[Solution]
        DESCRIPTION.

    # >>> soln = compute_egal_alg3_v3("FFk", [0.5, 1.5, 1], 3, k=20)
    
    # >>> soln = compute_egal_alg3_v3("FFk", [0.0135, 0.4865, 1.5, 1], 3, k=20)
    
    # >>> compute_egal_alg3_v3("FFk", [0.5, 1.5, 1], 2, k=20)
    
    
    # >>> compute_egal_alg3_v3("FFk", [0.0135, 0.4865, 1.5, 1], 2, k=20)
    
    # >>> compute_egal_alg3_v3("FFk", [0.2, 0.4, 0.8, 1.7, 3, 6.5, 14], 21, k=2)
    
    # >>> compute_egal_alg3_v3("FFk", [0.2,0.22, 0.4,0.42, 0.8,0.82, 1.7,1.7, 3,3.2, 6.5,6.7, 14,14.2], 21, k=3, r=0.25)
    
    
    # >>> soln = compute_egal_alg3_v3("FFk", [2.700083334, 2.540450001, 2.835183334, 0.599683334, 4.759250001, 1.026016668, 1.488833334, 2.600466668, 1.281950001, 0.386350001, 4.414050001, 0.801666668, 5.497566668, 2.798550001, 4.896533334, 5.330000001, 2.366533334, 6.063500001, 2.591333334, 3.726916668, 0.421733334, 4.301166668, 0.701066668, 2.625000001, 9.653816668, 1.633150001, 0.974733334, 2.966650001, 3.914716668, 4.019600001, 2.396966668, 1.905533334, 3.394583334, 2.845650001, 2.215733334, 5.022533334, 3.233833334, 2.472416668, 6.173300001, 3.058216668, 1.923483334, 1.768633334, 1.024283334, 0.611016668, 1.088533334, 1.091150001, 0.220150001, 2.017833334, 3.721483334, 0.258500001, 6.989550001, 2.143800001, 4.873550001, 2.968433334, 5.914333334, 1.666600001, 0.788833334, 6.582400001, 5.950000001, 1.257683334, 3.868466668, 5.023050001, 0.492733334, 0.584550001, 4.594050001, 3.682466668, 2.024916668, 0.638850001, 3.511950001, 3.666133334, 0.734533334, 0.154716668, 4.962216668, 1.431266668, 5.612550001, 3.322016668, 3.558416668, 2.931700001, 3.931666668, 1.035350001, 4.948133334, 2.737066668, 0.219333334, 4.456433334, 3.374966668, 0.541433334, 3.520800001, 3.399616668, 1.601066668, 1.778683334, 4.758666668, 2.744516668, 2.666716668, 3.454666668, 2.345183334, 0.507066668, 3.263533334, 2.752116668, 3.460716668, 3.773266668, 1.351950001, 4.432583334, 0.331816668, 2.011066668, 1.219316668, 1.138300001, 3.135950001, 3.216700001, 2.076983334, 1.724300001, 2.663700001, 2.922266668, 0.270050001, 9.054333334, 1.557033334, 5.678250001, 7.088883334, 1.458450001, 1.272633334, 2.057350001, 4.935533334, 1.072416668, 1.419366668, 8.141183334, 7.736866668, 2.401333334, 2.604866668, 2.684116668, 5.808483334, 2.994100001, 2.091250001, 2.556733334, 2.667600001, 2.443983334, 0.767616668, 5.081933334, 0.177483334, 4.400100001, 1.396216668, 4.765300001, 1.033133334, 1.218600001, 3.267900001, 0.748750001, 9.268383334, 5.649966668, 2.460616668, 0.615516668, 3.995733334, 1.907650001, 2.127016668, 0.774000001, 2.900166668, 0.404283334, 3.037816668, 1.175416668, 3.506466668, 4.286900001, 6.350866668, 0.195783334, 2.113950001, 1.905716668, 4.004766668, 2.124450001, 1.863483334, 0.175933334, 0.147650001, 4.258066668, 5.693633334, 1.382033332, 1.017883334, 1.089666668, 1.438516668, 0.651100001, 4.897416668, 2.609866668, 2.676466668, 4.596816668, 5.598816668, 5.596516668, 5.447650001, 4.999016668, 2.102650001, 4.104150001, 1.415866668, 0.918283334, 1.404550001, 4.084316668, 3.587783334, 6.275616668, 1.969466668, 5.760633334, 1.117166668, 1.610183334, 1.625866668, 1.741866668, 1.839116668, 1.158800001, 2.331433334, 1.417966668, 4.963250001, 0.569566668, 2.595233334, 2.337333334, 0.206216668, 5.051983334, 3.811800001, 3.539366668, 7.677366668, 3.387466668, 3.468900001, 3.917000001, 2.684683334, 2.613566668, 2.575000001, 1.745533334, 3.602150001, 0.330416668, 2.397616668, 3.583933334, 4.268433334, 4.255700001, 3.310383334, 7.184166668, 1.258500001, 0.582600001, 1.327133334, 4.632733334, 0.382666668, 4.833950001, 2.162116668, 5.959133334, 2.923566668, 3.260333334, 2.384300001, 3.294650001, 0.433216668, 2.178500001, 1.311050001, 3.893750001, 4.463366668, 0.523933334, 13.27948333, 0.136933334, 6.627116668, 0.387416668, 2.928850001, 3.550483334, 2.022250001, 6.503000001, 3.444166668, 3.752083334, 1.009683334, 3.237033334, 9.167716668, 3.846350001, 0.763133334, 2.858283334, 2.553733334, 4.055483334, 2.858883334, 4.162933334, 5.339766668, 3.233450001, 4.041200001, 3.248733334, 1.291400001, 1.857716668, 2.272500001, 1.684300001, 3.293533334, 3.300650001, 3.743083334, 1.371500001, 2.900583334, 3.144316668, 3.256966668, 3.145000001, 0.270100001, 5.199900001, 2.459200001, 2.117700001, 3.183166668, 3.298516668, 0.731283334, 3.950966668, 4.909916668, 3.034083334, 3.120800001, 6.647466668, 2.305516668, 8.798700001, 1.534800001, 1.882766668, 4.574450001, 2.531300001, 1.891200001, 4.558666668, 2.969766668, 1.841683334, 0.167566668, 0.737516668, 1.712850001, 1.053283334, 3.554833334, 2.290883334, 0.240633334, 2.364366668, 0.106516668, 2.306116668, 0.962483334, 1.607216668, 1.906916668, 3.057200001, 4.076983334, 0.124516668, 1.220200001, 2.197083334, 2.336966668, 2.329133334, 2.622883334, 0.250916668, 3.876083334, 5.640450001, 4.912633334, 2.310483334, 3.117700001, 2.524983334, 2.031700001, 2.688433334, 6.495916668, 1.223866668, 2.239433334, 2.424933334, 3.512416668, 1.479533334, 2.715183334, 3.839183334, 5.760183332, 4.131216668, 3.049183334, 3.143200001, 2.363666668, 8.577766668, 2.540766668, 1.348616668, 2.468366668, 7.243483334, 0.855066668, 14.9387, 3.336466668, 0.118050001, 0.595533334, 2.271900001, 2.039683334, 2.042950001, 2.459533334, 0.129083334, 0.275166668, 11.50521667, 1.665083334, 3.351716668, 2.763516668, 1.862533334, 3.913300001, 4.569900001, 6.006883334], 754, 5)
    
    
    # >>> compute_egal_alg3_test_v3("FFk", [0.106516668,0.118050001,0.124516668,0.129083334, 0.136933334,     0.147650001,     0.154716668,     0.167566668,     0.175933334,0.177483334,     0.195783334,     0.206216668,     0.219333334,     0.220150001,0.240633334,     0.250916668,     0.258500001,0.270050001,0.270100001,0.275166668,     0.330416668,0.331816668,     0.382666668,     0.386350001,     0.387416668,0.404283334,     0.421733334,     0.433216668,     0.492733334,     0.507066668,     0.523933334,0.541433334,     0.569566668,     0.582600001,     0.584550001,     0.595533334,     0.599683334,     0.611016668,     0.615516668,0.638850001,     0.651100001,     0.701066668,     0.731283334,     0.734533334,     0.737516668,     0.748750001,     0.763133334,     0.767616668,0.774000001,     0.788833334,     0.801666668,     0.855066668,     0.918283334,     0.962483334,     0.974733334,     1.009683334,     1.017883334,     1.024283334,     1.026016668,     1.033133334,     1.035350001,     1.053283334,     1.072416668,     1.088533334,     1.089666668,     1.091150001,     1.117166668,     1.138300001,     1.158800001,     1.175416668,     1.218600001,     1.219316668,     1.220200001,     1.223866668,     1.257683334,     1.258500001,     1.272633334,     1.281950001,     1.291400001,     1.311050001,     1.327133334,     1.348616668,     1.351950001,     1.371500001,     1.382033332,     1.396216668,     1.404550001,     1.415866668,     1.417966668,     1.419366668,     1.431266668,     1.438516668,     1.458450001,     1.479533334,     1.488833334,     1.534800001,     1.557033334,     1.601066668,     1.607216668,     1.610183334,     1.625866668,     1.633150001,     1.665083334,     1.666600001,     1.684300001,     1.712850001,     1.724300001,     1.741866668,     1.745533334,     1.768633334,     1.778683334,     1.839116668,     1.841683334,     1.857716668,     1.862533334,     1.863483334,     1.882766668,     1.891200001,     1.905533334,     1.905716668,     1.906916668,     1.907650001,     1.923483334,     1.969466668,     2.011066668,     2.017833334,     2.022250001,     2.024916668,     2.031700001,     2.039683334,     2.042950001,     2.057350001,     2.076983334,     2.091250001,     2.102650001,     2.113950001,     2.117700001,     2.124450001,     2.127016668,     2.143800001,     2.162116668,     2.178500001,     2.197083334,     2.215733334,     2.239433334,     2.271900001,     2.272500001,     2.290883334,     2.305516668,     2.306116668,     2.310483334,     2.329133334,     2.331433334,     2.336966668,     2.337333334,     2.345183334,     2.363666668,     2.364366668,     2.366533334,     2.384300001,     2.396966668,     2.397616668,     2.401333334,     2.424933334,     2.443983334,     2.459200001,     2.459533334,     2.460616668,     2.468366668,     2.472416668,     2.524983334,     2.531300001,     2.540450001,     2.540766668,     2.553733334,     2.556733334,     2.575000001,     2.591333334,     2.595233334,     2.600466668,     2.604866668,     2.609866668,     2.613566668,     2.622883334,     2.625000001,     2.663700001,     2.666716668,     2.667600001,     2.676466668,     2.684116668,     2.684683334,     2.688433334,     2.700083334,     2.715183334,     2.737066668,     2.744516668,     2.752116668,     2.763516668,     2.798550001,     2.835183334,     2.845650001,     2.858283334,     2.858883334,     2.900166668,     2.900583334,     2.922266668,     2.923566668,     2.928850001,     2.931700001,     2.966650001,     2.968433334,     2.969766668,     2.994100001,     3.034083334,     3.037816668,     3.049183334,     3.057200001,     3.058216668,     3.117700001,     3.120800001,     3.135950001,     3.143200001,     3.144316668,     3.145000001,     3.183166668,     3.216700001,     3.233450001,     3.233833334,     3.237033334,     3.248733334,     3.256966668,     3.260333334,     3.263533334,     3.267900001,     3.293533334,     3.294650001,     3.298516668,     3.300650001,     3.310383334,     3.322016668,     3.336466668,     3.351716668,     3.374966668,     3.387466668,     3.394583334,     3.399616668,     3.444166668,     3.454666668,     3.460716668,     3.468900001,     3.506466668,     3.511950001,     3.512416668,     3.520800001,     3.539366668,     3.550483334,     3.554833334,     3.558416668,     3.583933334,     3.587783334,     3.602150001,     3.666133334,     3.682466668,     3.721483334,     3.726916668,     3.743083334,     3.752083334,     3.773266668,     3.811800001,     3.839183334,     3.846350001,     3.868466668,     3.876083334,     3.893750001,     3.913300001,     3.914716668,     3.917000001,     3.931666668,     3.950966668,     3.995733334,     4.004766668,     4.019600001,     4.041200001,     4.055483334,     4.076983334,     4.084316668,     4.104150001,     4.131216668,     4.162933334,     4.255700001,     4.258066668,     4.268433334,     4.286900001,     4.301166668,     4.400100001,     4.414050001,     4.432583334,     4.456433334,     4.463366668,     4.558666668,     4.569900001,     4.574450001,     4.594050001,     4.596816668,     4.632733334,     4.758666668,     4.759250001,     4.765300001,     4.833950001,     4.873550001,     4.896533334,     4.897416668,     4.909916668,     4.912633334,     4.935533334,     4.948133334,     4.962216668,     4.963250001,     4.999016668,     5.022533334,     5.023050001,     5.051983334,     5.081933334,     5.199900001,     5.330000001,     5.339766668,     5.447650001,     5.497566668,     5.596516668,     5.598816668,     5.612550001,     5.640450001,     5.649966668,     5.678250001,     5.693633334,     5.760183332,     5.760633334,     5.808483334,     5.914333334,     5.950000001,     5.959133334,     6.006883334,     6.063500001,     6.173300001,     6.275616668,     6.350866668,     6.495916668,     6.503000001,     6.582400001,     6.627116668,     6.647466668,     6.989550001,     7.088883334,     7.184166668,     7.243483334,     7.677366668,     7.736866668,     8.141183334,     8.577766668,     8.798700001,     9.054333334,     9.167716668,     9.268383334,     9.653816668,     11.50521667,     13.27948333,     14.9387], 754, k=20)
    
    # >>> compute_egal_alg3_test_v3("FFk", [0.106516668,0.118050001,0.124516668,0.129083334, 0.136933334,     0.147650001,     0.154716668,     0.167566668,     0.175933334,0.177483334,     0.195783334,     0.206216668,     0.219333334,     0.220150001,0.240633334,     0.250916668,     0.258500001,0.270050001,0.270100001,0.275166668,     0.330416668,0.331816668,     0.382666668,     0.386350001,     0.387416668,0.404283334,     0.421733334,     0.433216668,     0.492733334,     0.507066668,     0.523933334,0.541433334,     0.569566668,     0.582600001,     0.584550001,     0.595533334,     0.599683334,     0.611016668,     0.615516668,0.638850001,     0.651100001,     0.701066668,     0.731283334,     0.734533334,     0.737516668,     0.748750001,     0.763133334,     0.767616668,0.774000001,     0.788833334,     0.801666668,     0.855066668,     0.918283334,     0.962483334,     0.974733334,     1.009683334,     1.017883334,     1.024283334,     1.026016668,     1.033133334,     1.035350001,     1.053283334,     1.072416668,     1.088533334,     1.089666668,     1.091150001,     1.117166668,     1.138300001,     1.158800001,     1.175416668,     1.218600001,     1.219316668,     1.220200001,     1.223866668,     1.257683334,     1.258500001,     1.272633334,     1.281950001,     1.291400001,     1.311050001,     1.327133334,     1.348616668,     1.351950001,     1.371500001,     1.382033332,     1.396216668,     1.404550001,     1.415866668,     1.417966668,     1.419366668,     1.431266668,     1.438516668,     1.458450001,     1.479533334,     1.488833334,     1.534800001,     1.557033334,     1.601066668,     1.607216668,     1.610183334,     1.625866668,     1.633150001,     1.665083334,     1.666600001,     1.684300001,     1.712850001,     1.724300001,     1.741866668,     1.745533334,     1.768633334,     1.778683334,     1.839116668,     1.841683334,     1.857716668,     1.862533334,     1.863483334,     1.882766668,     1.891200001,     1.905533334,     1.905716668,     1.906916668,     1.907650001,     1.923483334,     1.969466668,     2.011066668,     2.017833334,     2.022250001,     2.024916668,     2.031700001,     2.039683334,     2.042950001,     2.057350001,     2.076983334,     2.091250001,     2.102650001,     2.113950001,     2.117700001,     2.124450001,     2.127016668,     2.143800001,     2.162116668,     2.178500001,     2.197083334,     2.215733334,     2.239433334,     2.271900001,     2.272500001,     2.290883334,     2.305516668,     2.306116668,     2.310483334,     2.329133334,     2.331433334,     2.336966668,     2.337333334,     2.345183334,     2.363666668,     2.364366668,     2.366533334,     2.384300001,     2.396966668,     2.397616668,     2.401333334,     2.424933334,     2.443983334,     2.459200001,     2.459533334,     2.460616668,     2.468366668,     2.472416668,     2.524983334,     2.531300001,     2.540450001,     2.540766668,     2.553733334,     2.556733334,     2.575000001,     2.591333334,     2.595233334,     2.600466668,     2.604866668,     2.609866668,     2.613566668,     2.622883334,     2.625000001,     2.663700001,     2.666716668,     2.667600001,     2.676466668,     2.684116668,     2.684683334,     2.688433334,     2.700083334,     2.715183334,     2.737066668,     2.744516668,     2.752116668,     2.763516668,     2.798550001,     2.835183334,     2.845650001,     2.858283334,     2.858883334,     2.900166668,     2.900583334,     2.922266668,     2.923566668,     2.928850001,     2.931700001,     2.966650001,     2.968433334,     2.969766668,     2.994100001,     3.034083334,     3.037816668,     3.049183334,     3.057200001,     3.058216668,     3.117700001,     3.120800001,     3.135950001,     3.143200001,     3.144316668,     3.145000001,     3.183166668,     3.216700001,     3.233450001,     3.233833334,     3.237033334,     3.248733334,     3.256966668,     3.260333334,     3.263533334,     3.267900001,     3.293533334,     3.294650001,     3.298516668,     3.300650001,     3.310383334,     3.322016668,     3.336466668,     3.351716668,     3.374966668,     3.387466668,     3.394583334,     3.399616668,     3.444166668,     3.454666668,     3.460716668,     3.468900001,     3.506466668,     3.511950001,     3.512416668,     3.520800001,     3.539366668,     3.550483334,     3.554833334,     3.558416668,     3.583933334,     3.587783334,     3.602150001,     3.666133334,     3.682466668,     3.721483334,     3.726916668,     3.743083334,     3.752083334,     3.773266668,     3.811800001,     3.839183334,     3.846350001,     3.868466668,     3.876083334,     3.893750001,     3.913300001,     3.914716668,     3.917000001,     3.931666668,     3.950966668,     3.995733334,     4.004766668,     4.019600001,     4.041200001,     4.055483334,     4.076983334,     4.084316668,     4.104150001,     4.131216668,     4.162933334,     4.255700001,     4.258066668,     4.268433334,     4.286900001,     4.301166668,     4.400100001,     4.414050001,     4.432583334,     4.456433334,     4.463366668,     4.558666668,     4.569900001,     4.574450001,     4.594050001,     4.596816668,     4.632733334,     4.758666668,     4.759250001,     4.765300001,     4.833950001,     4.873550001,     4.896533334,     4.897416668,     4.909916668,     4.912633334,     4.935533334,     4.948133334,     4.962216668,     4.963250001,     4.999016668,     5.022533334,     5.023050001,     5.051983334,     5.081933334,     5.199900001,     5.330000001,     5.339766668,     5.447650001,     5.497566668,     5.596516668,     5.598816668,     5.612550001,     5.640450001,     5.649966668,     5.678250001,     5.693633334,     5.760183332,     5.760633334,     5.808483334,     5.914333334,     5.950000001,     5.959133334,     6.006883334,     6.063500001,     6.173300001,     6.275616668,     6.350866668,     6.495916668,     6.503000001,     6.582400001,     6.627116668,     6.647466668,     6.989550001,     7.088883334,     7.184166668,     7.243483334,     7.677366668,     7.736866668,     8.141183334,     8.577766668,     8.798700001,     9.054333334,     9.167716668,     9.268383334,     9.653816668,     11.50521667,     13.27948333,     14.9387], 754, k=30)
    
    # >>> compute_egal_alg3_test_v3("FFk", [0.106516668,0.118050001,0.124516668,0.129083334, 0.136933334,     0.147650001,     0.154716668,     0.167566668,     0.175933334,0.177483334,     0.195783334,     0.206216668,     0.219333334,     0.220150001,0.240633334,     0.250916668,     0.258500001,0.270050001,0.270100001,0.275166668,     0.330416668,0.331816668,     0.382666668,     0.386350001,     0.387416668,0.404283334,     0.421733334,     0.433216668,     0.492733334,     0.507066668,     0.523933334,0.541433334,     0.569566668,     0.582600001,     0.584550001,     0.595533334,     0.599683334,     0.611016668,     0.615516668,0.638850001,     0.651100001,     0.701066668,     0.731283334,     0.734533334,     0.737516668,     0.748750001,     0.763133334,     0.767616668,0.774000001,     0.788833334,     0.801666668,     0.855066668,     0.918283334,     0.962483334,     0.974733334,     1.009683334,     1.017883334,     1.024283334,     1.026016668,     1.033133334,     1.035350001,     1.053283334,     1.072416668,     1.088533334,     1.089666668,     1.091150001,     1.117166668,     1.138300001,     1.158800001,     1.175416668,     1.218600001,     1.219316668,     1.220200001,     1.223866668,     1.257683334,     1.258500001,     1.272633334,     1.281950001,     1.291400001,     1.311050001,     1.327133334,     1.348616668,     1.351950001,     1.371500001,     1.382033332,     1.396216668,     1.404550001,     1.415866668,     1.417966668,     1.419366668,     1.431266668,     1.438516668,     1.458450001,     1.479533334,     1.488833334,     1.534800001,     1.557033334,     1.601066668,     1.607216668,     1.610183334,     1.625866668,     1.633150001,     1.665083334,     1.666600001,     1.684300001,     1.712850001,     1.724300001,     1.741866668,     1.745533334,     1.768633334,     1.778683334,     1.839116668,     1.841683334,     1.857716668,     1.862533334,     1.863483334,     1.882766668,     1.891200001,     1.905533334,     1.905716668,     1.906916668,     1.907650001,     1.923483334,     1.969466668,     2.011066668,     2.017833334,     2.022250001,     2.024916668,     2.031700001,     2.039683334,     2.042950001,     2.057350001,     2.076983334,     2.091250001,     2.102650001,     2.113950001,     2.117700001,     2.124450001,     2.127016668,     2.143800001,     2.162116668,     2.178500001,     2.197083334,     2.215733334,     2.239433334,     2.271900001,     2.272500001,     2.290883334,     2.305516668,     2.306116668,     2.310483334,     2.329133334,     2.331433334,     2.336966668,     2.337333334,     2.345183334,     2.363666668,     2.364366668,     2.366533334,     2.384300001,     2.396966668,     2.397616668,     2.401333334,     2.424933334,     2.443983334,     2.459200001,     2.459533334,     2.460616668,     2.468366668,     2.472416668,     2.524983334,     2.531300001,     2.540450001,     2.540766668,     2.553733334,     2.556733334,     2.575000001,     2.591333334,     2.595233334,     2.600466668,     2.604866668,     2.609866668,     2.613566668,     2.622883334,     2.625000001,     2.663700001,     2.666716668,     2.667600001,     2.676466668,     2.684116668,     2.684683334,     2.688433334,     2.700083334,     2.715183334,     2.737066668,     2.744516668,     2.752116668,     2.763516668,     2.798550001,     2.835183334,     2.845650001,     2.858283334,     2.858883334,     2.900166668,     2.900583334,     2.922266668,     2.923566668,     2.928850001,     2.931700001,     2.966650001,     2.968433334,     2.969766668,     2.994100001,     3.034083334,     3.037816668,     3.049183334,     3.057200001,     3.058216668,     3.117700001,     3.120800001,     3.135950001,     3.143200001,     3.144316668,     3.145000001,     3.183166668,     3.216700001,     3.233450001,     3.233833334,     3.237033334,     3.248733334,     3.256966668,     3.260333334,     3.263533334,     3.267900001,     3.293533334,     3.294650001,     3.298516668,     3.300650001,     3.310383334,     3.322016668,     3.336466668,     3.351716668,     3.374966668,     3.387466668,     3.394583334,     3.399616668,     3.444166668,     3.454666668,     3.460716668,     3.468900001,     3.506466668,     3.511950001,     3.512416668,     3.520800001,     3.539366668,     3.550483334,     3.554833334,     3.558416668,     3.583933334,     3.587783334,     3.602150001,     3.666133334,     3.682466668,     3.721483334,     3.726916668,     3.743083334,     3.752083334,     3.773266668,     3.811800001,     3.839183334,     3.846350001,     3.868466668,     3.876083334,     3.893750001,     3.913300001,     3.914716668,     3.917000001,     3.931666668,     3.950966668,     3.995733334,     4.004766668,     4.019600001,     4.041200001,     4.055483334,     4.076983334,     4.084316668,     4.104150001,     4.131216668,     4.162933334,     4.255700001,     4.258066668,     4.268433334,     4.286900001,     4.301166668,     4.400100001,     4.414050001,     4.432583334,     4.456433334,     4.463366668,     4.558666668,     4.569900001,     4.574450001,     4.594050001,     4.596816668,     4.632733334,     4.758666668,     4.759250001,     4.765300001,     4.833950001,     4.873550001,     4.896533334,     4.897416668,     4.909916668,     4.912633334,     4.935533334,     4.948133334,     4.962216668,     4.963250001,     4.999016668,     5.022533334,     5.023050001,     5.051983334,     5.081933334,     5.199900001,     5.330000001,     5.339766668,     5.447650001,     5.497566668,     5.596516668,     5.598816668,     5.612550001,     5.640450001,     5.649966668,     5.678250001,     5.693633334,     5.760183332,     5.760633334,     5.808483334,     5.914333334,     5.950000001,     5.959133334,     6.006883334,     6.063500001,     6.173300001,     6.275616668,     6.350866668,     6.495916668,     6.503000001,     6.582400001,     6.627116668,     6.647466668,     6.989550001,     7.088883334,     7.184166668,     7.243483334,     7.677366668,     7.736866668,     8.141183334,     8.577766668,     8.798700001,     9.054333334,     9.167716668,     9.268383334,     9.653816668,     11.50521667,     13.27948333,     14.9387], 754, k=40)
    
    # >>> compute_egal_alg3_test_v3("FFk", [0.106516668,0.118050001,0.124516668,0.129083334, 0.136933334,     0.147650001,     0.154716668,     0.167566668,     0.175933334,0.177483334,     0.195783334,     0.206216668,     0.219333334,     0.220150001,0.240633334,     0.250916668,     0.258500001,0.270050001,0.270100001,0.275166668,     0.330416668,0.331816668,     0.382666668,     0.386350001,     0.387416668,0.404283334,     0.421733334,     0.433216668,     0.492733334,     0.507066668,     0.523933334,0.541433334,     0.569566668,     0.582600001,     0.584550001,     0.595533334,     0.599683334,     0.611016668,     0.615516668,0.638850001,     0.651100001,     0.701066668,     0.731283334,     0.734533334,     0.737516668,     0.748750001,     0.763133334,     0.767616668,0.774000001,     0.788833334,     0.801666668,     0.855066668,     0.918283334,     0.962483334,     0.974733334,     1.009683334,     1.017883334,     1.024283334,     1.026016668,     1.033133334,     1.035350001,     1.053283334,     1.072416668,     1.088533334,     1.089666668,     1.091150001,     1.117166668,     1.138300001,     1.158800001,     1.175416668,     1.218600001,     1.219316668,     1.220200001,     1.223866668,     1.257683334,     1.258500001,     1.272633334,     1.281950001,     1.291400001,     1.311050001,     1.327133334,     1.348616668,     1.351950001,     1.371500001,     1.382033332,     1.396216668,     1.404550001,     1.415866668,     1.417966668,     1.419366668,     1.431266668,     1.438516668,     1.458450001,     1.479533334,     1.488833334,     1.534800001,     1.557033334,     1.601066668,     1.607216668,     1.610183334,     1.625866668,     1.633150001,     1.665083334,     1.666600001,     1.684300001,     1.712850001,     1.724300001,     1.741866668,     1.745533334,     1.768633334,     1.778683334,     1.839116668,     1.841683334,     1.857716668,     1.862533334,     1.863483334,     1.882766668,     1.891200001,     1.905533334,     1.905716668,     1.906916668,     1.907650001,     1.923483334,     1.969466668,     2.011066668,     2.017833334,     2.022250001,     2.024916668,     2.031700001,     2.039683334,     2.042950001,     2.057350001,     2.076983334,     2.091250001,     2.102650001,     2.113950001,     2.117700001,     2.124450001,     2.127016668,     2.143800001,     2.162116668,     2.178500001,     2.197083334,     2.215733334,     2.239433334,     2.271900001,     2.272500001,     2.290883334,     2.305516668,     2.306116668,     2.310483334,     2.329133334,     2.331433334,     2.336966668,     2.337333334,     2.345183334,     2.363666668,     2.364366668,     2.366533334,     2.384300001,     2.396966668,     2.397616668,     2.401333334,     2.424933334,     2.443983334,     2.459200001,     2.459533334,     2.460616668,     2.468366668,     2.472416668,     2.524983334,     2.531300001,     2.540450001,     2.540766668,     2.553733334,     2.556733334,     2.575000001,     2.591333334,     2.595233334,     2.600466668,     2.604866668,     2.609866668,     2.613566668,     2.622883334,     2.625000001,     2.663700001,     2.666716668,     2.667600001,     2.676466668,     2.684116668,     2.684683334,     2.688433334,     2.700083334,     2.715183334,     2.737066668,     2.744516668,     2.752116668,     2.763516668,     2.798550001,     2.835183334,     2.845650001,     2.858283334,     2.858883334,     2.900166668,     2.900583334,     2.922266668,     2.923566668,     2.928850001,     2.931700001,     2.966650001,     2.968433334,     2.969766668,     2.994100001,     3.034083334,     3.037816668,     3.049183334,     3.057200001,     3.058216668,     3.117700001,     3.120800001,     3.135950001,     3.143200001,     3.144316668,     3.145000001,     3.183166668,     3.216700001,     3.233450001,     3.233833334,     3.237033334,     3.248733334,     3.256966668,     3.260333334,     3.263533334,     3.267900001,     3.293533334,     3.294650001,     3.298516668,     3.300650001,     3.310383334,     3.322016668,     3.336466668,     3.351716668,     3.374966668,     3.387466668,     3.394583334,     3.399616668,     3.444166668,     3.454666668,     3.460716668,     3.468900001,     3.506466668,     3.511950001,     3.512416668,     3.520800001,     3.539366668,     3.550483334,     3.554833334,     3.558416668,     3.583933334,     3.587783334,     3.602150001,     3.666133334,     3.682466668,     3.721483334,     3.726916668,     3.743083334,     3.752083334,     3.773266668,     3.811800001,     3.839183334,     3.846350001,     3.868466668,     3.876083334,     3.893750001,     3.913300001,     3.914716668,     3.917000001,     3.931666668,     3.950966668,     3.995733334,     4.004766668,     4.019600001,     4.041200001,     4.055483334,     4.076983334,     4.084316668,     4.104150001,     4.131216668,     4.162933334,     4.255700001,     4.258066668,     4.268433334,     4.286900001,     4.301166668,     4.400100001,     4.414050001,     4.432583334,     4.456433334,     4.463366668,     4.558666668,     4.569900001,     4.574450001,     4.594050001,     4.596816668,     4.632733334,     4.758666668,     4.759250001,     4.765300001,     4.833950001,     4.873550001,     4.896533334,     4.897416668,     4.909916668,     4.912633334,     4.935533334,     4.948133334,     4.962216668,     4.963250001,     4.999016668,     5.022533334,     5.023050001,     5.051983334,     5.081933334,     5.199900001,     5.330000001,     5.339766668,     5.447650001,     5.497566668,     5.596516668,     5.598816668,     5.612550001,     5.640450001,     5.649966668,     5.678250001,     5.693633334,     5.760183332,     5.760633334,     5.808483334,     5.914333334,     5.950000001,     5.959133334,     6.006883334,     6.063500001,     6.173300001,     6.275616668,     6.350866668,     6.495916668,     6.503000001,     6.582400001,     6.627116668,     6.647466668,     6.989550001,     7.088883334,     7.184166668,     7.243483334,     7.677366668,     7.736866668,     8.141183334,     8.577766668,     8.798700001,     9.054333334,     9.167716668,     9.268383334,     9.653816668,     11.50521667,     13.27948333,     14.9387], 754, k=50)
    
    # >>> soln = compute_egal_alg3_v3("FFk", [2, 4, 8, 8, 8, 17, 17, 17, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 65, 65, 65, 65, 65, 65, 140], 210, r=0.5, k=1)
    
    # >>> soln = compute_egal_alg3_v3("FFk", [2, 4, 8, 8, 8, 17, 17, 17, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 65, 65, 65, 65, 65, 65, 140], 220, r=0.25, k=1)


    '''
    # starting time of the function execution
    # start = time.perf_counter()
    
    if __name__ == "__main__":
        logger = logging.getLogger(__name__)
        logging.basicConfig(filename = "heuristic_algorithm3_github.log", encoding = "utf-8", level=logging.DEBUG, force=True)
    else:
        logger = logging.getLogger("heuristic_algorithm3.compute_egal_alg3_v3")
    
    
    if all(isinstance(item, tuple) for item in demands):
        if not all(len(item)==2 for item in demands):
            raise Exception("Some tuples are not in the format (item_value, index)")
        else:
            new_demands = demands
    else:
        if any(isinstance(item, tuple) for item in demands):
            raise Exception("Some items are not in the format (item_value, index)")
        else:
            new_demands = ffk.itemslist_to_tuplelist(demands)
    
    alg = "online" if alg == "FFk" else "decreasing"        
    
    # uncomment when testing this function
    # logger.info(f"Algorithm: {alg}, Demands: {new_demands}, Supply: {supply}, k: {k}, r: {r}\n")
    
    # if sum of all the demands is at most the bin capacity(supply) no need to do anything.
    if sum([item[0] for item in new_demands]) <= supply:
        agents_k_vector = [(1, item[1]) for item in new_demands]
        
        binner = ffk.bkc_ffk()
        if alg == "online":
            solution = ffk.online_ffk_supply_withvectork_test(binner, supply, new_demands, agents_k_vector)
        else:
            solution = ffk.decreasing_ffk_supply_withvectork_test(binner, supply, new_demands, agents_k_vector)
        sums, lists = solution
        
        # Now we will add this solution to the list of different solutions.
        # sums, lists = solution
        soln  = Solution(sums, lists, new_demands, agents_k_vector, k=1)
    
        soln.compute_agents_connection_vector()
        soln.compute_agents_egal_vector()
        soln.solution_egalconn_val(0)
        soln.solution_egalsupply_val(0)
        soln.compute_asr_vector()
    
        # logging ------- START
        # uncomment when testing function
        # logger.debug(f"Agents connection vector: {soln.agents_conn_vector}")
        # logger.debug(f"Agents egal vector: {soln.agents_egal_vector}")
        # logger.debug(f"Num bins: {binner.numbins(solution)}")
        # logger.debug(f"k for large item(or min k): {1}")
        # logger.debug(f"Egalitarian supply: {soln.egalsupply_val}, Egalitarian connection: {soln.egalsupply_val}") 
        # logger.debug(f"Min agent supply rate: {soln.min_asr[0]}")
        # logger.debug(f"Total watts: {sum([item[0] for item in soln.agents_egal_vector])}")
        # logger.debug(f"Total connection: {sum([item[0] for item in soln.agents_conn_vector])}\n")
        # max_egal_sup, min_egal_sup = soln.determine_max_and_min()
        # logger.debug(f"Min egal supply: {min_egal_sup}, Max eegal supply: {max_egal_sup}, Difference: {max_egal_sup - min_egal_sup}")            
        # end = time.perf_counter()
        # logger.info(f"Time taken for the entire function: {end - start:0.4f} seconds\n\n\n\n\n")
        # logging ---------- END
        
        # comment it if testing this function by executing this python file.
        return soln
    
    # determine the largest_demand in new_demands
    largest_demand = max(new_demands)
    
    # compute the groups.
    groups = compute_groups_ofitems(new_demands, r, largest_demand)
    
    # for logging purpose - start
    # logging.info(f"Each group has size >= {r*largest_demand[0]}. Groups are:")
    # groups_str = [f"group index: {grp.group_id}, agents in group: {grp.agents}" for grp in groups]
    # logger.debug("\n".join(groups_str))
    # logger.info("\n")
    # for logging - end
    
    # form a new agents vector from the groups. For each agent the index is the group's id.
    new_new_demands = []
    for grp in groups:
        new_new_demands.append((grp.agents_pseudo_sum, grp.group_id))
    
    # for logging -start
    # logging.info("Pseudo group demand list:")
    # demands_str = [f"Group demand: {demand[0]}, index: {demand[1]}" for demand in new_new_demands]
    # logger.debug("\n".join(demands_str))
    # logger.info("\n")
    # for logging - end
    
    # determine the max demand in new_new_demands
    maxin_newnewdemands = max(new_new_demands)
    
    
    # determine the demands that can be grouped together all the time.
    # determine the solution for each possible grouping of items.
    # compute the best solution
    # return the best solution
    
    # we need sorted new_new_demands to compute stl_demand_list
    sorted_new_new_demands = sorted(new_new_demands, key=lambda demand: demand[0])
    
    # for logging - start
    # logging.info("After sorting:")
    # demands_str = [f"Group demand: {demand[0]}, index: {demand[1]}" for demand in sorted_new_new_demands]
    # logger.debug("\n".join(demands_str))
    # logger.info("\n")
    # for loggin - end
    
    # compute stl_demand list
    stl_demand_list = []
    stl_demand_list_sum = 0
    for demand in sorted_new_new_demands:
        if stl_demand_list_sum + demand[0] <= supply - maxin_newnewdemands[0]:
            stl_demand_list.append(demand)
            stl_demand_list_sum += demand[0]
    
    len_stl_demand_list = len(stl_demand_list)
    
    # for logging - start
    # logging.info("List of group demands that can be connected all time:")
    # demands_str = [f"Group demand: {demand[0]}, index: {demand[1]}" for demand in stl_demand_list]
    # logger.debug("\n".join(demands_str))
    # logger.debug(f"Sum(stl_demand_list): {stl_demand_list_sum}")
    # logger.info("\n")
    # for logging - end
    
    # initialize best_solution
    best_solution = None
    
    # now we will use ternary search
    begin = 0
    end = len(stl_demand_list)
    
    while end - begin > 3:
        # compute the solution where the 'g' items in stl_demand_list are always connected.

        soln_begin = compute_solution(alg, new_new_demands, groups, stl_demand_list, supply, begin, k)
        soln_end = compute_solution(alg, new_new_demands, groups, stl_demand_list, supply, end, k)
        
        sums_begin, lists_begin, new_agents_k_vector_begin, g_items_list_begin = soln_begin
        sums_end, lists_end, new_agents_k_vector_end, g_items_list_end = soln_end
        
        soln_begin = Solution(sums=sums_begin, lists=lists_begin, agents=new_demands, agentskvector=new_agents_k_vector_begin, supply=supply, k=k, group_size=begin, group_list=g_items_list_begin)
        soln_end = Solution(sums=sums_end, lists=lists_end, agents=new_demands, agentskvector=new_agents_k_vector_end, supply=supply, k=k, group_size=end, group_list=g_items_list_end)
        
        # compute the agents connection vector, agents egal vector, asr, agents egal connection,
        # agents egal val
        soln_begin.compute_agents_connection_vector()
        soln_begin.compute_agents_egal_vector()
        soln_begin.solution_egalconn_val(0)
        soln_begin.solution_egalsupply_val(0)
        soln_begin.compute_asr_vector()
        
        soln_end.compute_agents_connection_vector()
        soln_end.compute_agents_egal_vector()
        soln_end.solution_egalconn_val(0)
        soln_end.solution_egalsupply_val(0)
        soln_end.compute_asr_vector()
    
        
        if soln_end > soln_begin and (best_solution == None or soln_end > best_solution) :
            best_solution = soln_end
        elif best_solution == None or soln_begin > best_solution :
            best_solution = soln_begin
            
        # update begin and end
        begin = int(round((begin*2 + end)/3, 0))
        end = int(round((begin + end*2)/3, 0))
         
        # logging ---------- START
        # uncomment if you want to test soln_begin
        # logger.debug(f"g: {soln_begin.gs}")
        # logger.debug(f"Agents egal vector: {soln_begin.agents_egal_vector}")
        # logger.debug(f"Num bins: {len(soln_begin.lists)}")
        # logger.debug(f"k for large item(or min k): {soln_begin.k}")
        # logger.debug(f"Egalitarian supply: {soln_begin.egalsupply_val}")
        # logger.debug(f"Egalitarian connection: {soln_begin.egalconn_val}")
        # logger.debug(f"Min agent supply rate: {soln_begin.min_asr[0]}")
        # logger.debug(f"Total watts: {sum([item[0] for item in soln_begin.agents_egal_vector])}")
        # logger.debug(f"Total connection: {sum([item[0] for item in soln_begin.agents_conn_vector])}")
        # max_egal_sup, min_egal_sup = soln_begin.determine_max_and_min()
        # logger.debug(f"Min egal supply: {min_egal_sup}, Max egal supply: {max_egal_sup}, Difference: {max_egal_sup - min_egal_sup}")            
        # logger.info("\n")
        # logging ------------- END
        
        # logging ------------ START
        # uncomment if you want to test soln_end
        # logger.debug(f"g: {soln_end.gs}")
        # logger.debug(f"Agents egal vector: {soln_end.agents_egal_vector}")
        # logger.debug(f"Num bins: {len(soln_end.lists)}")
        # logger.debug(f"k for large item(or min k): {soln_end.k}")
        # logger.debug(f"Egalitarian supply: {soln_end.egalsupply_val}")
        # logger.debug(f"Egalitarian connection: {soln_end.egalconn_val}")
        # logger.debug(f"Min agent supply rate: {soln_end.min_asr[0]}")
        # logger.debug(f"Total watts: {sum([item[0] for item in soln_end.agents_egal_vector])}")
        # logger.debug(f"Total connection: {sum([item[0] for item in soln_end.agents_conn_vector])}")
        # max_egal_sup, min_egal_sup = soln_end.determine_max_and_min()
        # logger.debug(f"Min egal supply: {min_egal_sup}, Max egal supply: {max_egal_sup}, Difference: {max_egal_sup - min_egal_sup}")            
        # logger.info("\n")
        # logging ------------ END
    
    for grp in range(begin, end+1):
        soln_grp = compute_solution(alg, new_new_demands, groups, stl_demand_list, supply, grp, k)
    
        sums, lists, new_agents_k_vector, g_items_list = soln_grp
        
        solution_grp = Solution(sums, lists, new_demands, new_agents_k_vector, group_size = grp , g=grp, group_list=g_items_list)
        solution_grp.compute_agents_connection_vector()
        solution_grp.compute_agents_egal_vector()
        solution_grp.solution_egalconn_val(0)
        solution_grp.solution_egalsupply_val(0)
        solution_grp.compute_asr_vector()
        
        if best_solution == None or solution_grp > best_solution:
            best_solution = solution_grp
    
    
    # logging ---------- START
    # uncomment when testing this function
    # logger.info("Final Best Solution:")
    # logger.debug(f"g: {best_solution.gs}")
    # logger.debug(f"Agents connection vector: {best_solution.agents_conn_vector}")
    # logger.debug(f"Agents egal vector: {best_solution.agents_egal_vector}")
    # logger.debug(f"Num bins: {len(best_solution.lists)}")
    # logger.debug(f"k for large item(or min k): {best_solution.k}")
    # logger.debug(f"Egalitarian supply: {best_solution.egalsupply_val}")
    # logger.debug(f"Egalitarian connection: {best_solution.egalconn_val}")
    # logger.debug(f"Min agent supply rate: {best_solution.min_asr[0]}")
    # logger.debug(f"Total watts: {sum([item[0] for item in best_solution.agents_egal_vector])}")
    # logger.debug(f"Total connection: {sum([item[0] for item in best_solution.agents_conn_vector])}\n")
    # max_egal_sup, min_egal_sup = best_solution.determine_max_and_min()
    # logger.debug(f"Min egal supply: {min_egal_sup}, Max egal supply: {max_egal_sup}, Difference: {max_egal_sup - min_egal_sup}")
    # logger.info("\n\n\n\n")
    # end = time.perf_counter()
    # logger.info(f"Time taken for the entire function: {end - start:0.4f} seconds")
    # logger.info("\n\n\n\n")
    # logging ------------- END

    # comment it while testing this function by executing this file.
    return best_solution

    
if __name__ == "__main__":
    import doctest
    
    (failures, tests) = doctest.testmod(report=True, verbose=False)
    print(f"Failures: {failures}, Tests: {tests}")